#!/usr/bin/env node

'use strict';

var fs = require('fs'),
    sc = require('subcommander'),
    readlineSync = require('readline-sync'),
    _ = require('underscore'),
    ProjectJs = require('../project'),
    projectJs = new ProjectJs();

var ensureRequiredOption = function(options, prop, question, errMessage) {
    if (!_.has(options, prop) || _.isEmpty(options[prop])) {
        var val = readlineSync.question(question);
        if (_.isUndefined(val) || _.isNull(val) || _.isEmpty(val)) {
            console.error(errMessage);
            return false;
        }
        options[prop] = val;
    }
    return true;
};

sc.scriptName("projectjs");

// version command
sc.command('version', {
    desc: 'Displays ProjectJs version',
    callback: function() {
        console.log(projectJs.getVersion());
    }
});

// init command
sc.command('init', {
    desc: "Initializes a new ProjectJs project",
    callback: function(options) {
        if (!_.has(options, "namespace")) {
            var ns = readlineSync.question("Base namespace for this project : ");
            if (_.isUndefined(ns) || _.isNull(ns) || _.isEmpty(ns)) {
                console.error("Base namespace is required");
                return;
            }
            options["namespace"] = ns;
        }
        if (!_.has(options, "src")) {
            var src = readlineSync.question("Name project source folder (leave blank to default to 'src') : ", {
                defaultInput: "src"
            });
            if (!_.isUndefined(src) && !_.isNull(src) && !_.isEmpty(src)) {
                options["src"] = src;
            }
        }
        if (!_.has(options, "build")) {
            var build = readlineSync.question("Name project build folder (leave blank to default to 'build') : ", {
                defaultInput: "build"
            });
            if (!_.isUndefined(build) && !_.isNull(build) && !_.isEmpty(build)) {
                options["build"] = build;
            }
        }

        projectJs.init(options);
    }
}).option('namespace', {
    abbr: 'ns',
    desc: "Base namespace [REQUIRED]"
}).option('root', {
    abbr: 'r',
    desc: "Project root (if not the current directory)"
}).option('src', {
    abbr: 's',
    desc: "Path to a project source folder. If does not exist, will be created."
}).option('build', {
    abbr: 'b',
    desc: "Path to a project build folder. If does not exist, will be created."
});

// create new class
sc.command('newclass', {
    desc: "Creates a new class file",
    callback: function(options) {
        if (!_.has(options, "name") || _.isEmpty(options["name"])) {
            var nm;
            if (_.has(options, "0") && _.isString(options["0"]) && !_.isEmpty(options["0"])) {
                nm = options["0"];
            } else {
                nm = readlineSync.question("New class name: ");
            }
            if (_.isUndefined(nm) || _.isNull(nm) || _.isEmpty(nm)) {
                console.error("Class name is required");
                return;
            }
            options["name"] = nm;
        }
        projectJs.createNewClass(options);
    }
}).option('name', {
    abbr: 'n',
    desc: "New class name [REQUIRED]"
}).option('path', {
    abbr: 'p',
    desc: "Path to create class file on (if not in the current directory)"
});

// remove class
sc.command('rmclass', {
    desc: "Removes a class file from the project",
    callback: function(options) {
        // make sure we have class name
        if (!_.has(options, "name") || _.isEmpty(options["name"])) {
            if (_.has(options, "0") && _.isString(options["0"]) && !_.isEmpty(options["0"])) {
                options['name'] = options["0"];
            } else {
                var isNameProvided = ensureRequiredOption(
                    options,
                    'name',
                    "Name of class to delete: ",
                    "Class name is required"
                );
                if (!isNameProvided) {
                    return;
                }
            }
        }
        // confirm if needed
        if (!_.has(options, 'force') || !options['force']) {
            var isConfirmed = readlineSync.keyInYNStrict("Are you sure you want to delete this class? This action cannot be undone!");
            if (!isConfirmed) {
                return;
            }
        }
        // if we make it this far, let's go ahead...
        projectJs.removeClass({
            'name': options['name'],
            'retainFile': _.has(options, 'cache') ? true : false,
            'callback': function(err, data) {
                if (err === null && data['success'] === true) {
                    console.log("Class %s removed from project", data['class'])
                } else if (err != null) {
                    console.error("ERROR: %s", err.message);
                }
            }
        });
    }
}).option('name', {
    abbr: 'n',
    desc: 'Class name [REQUIRED]'
}).option('force', {
    abbr: 'f',
    desc: "Force remove / don't ask for confirmation",
    flag: true
}).option('cache', {
    abbr: 'c',
    desc: "Delete the class reference from the project, but keep the file on disk",
    flag: true
});

// create new directory / package (not entirely necessary, but what the heck)
var newDirCallback = function(options) {
    if (!_.has(options, "name") || _.isEmpty(options.name)) {
        var nm = readlineSync.question("New package name: ");
        if (_.isUndefined(nm) || _.isNull(nm) || _.isEmpty(nm)) {
            console.error("Class name is required");
            return;
        }
        options.name = nm;
    }
    fs.mkdirSync(options.name.toLowerCase());
};
sc.command('newdir', {
    desc: "Creates a new package directory (though mkdir works fine too)",
    callback: newDirCallback
}).option("name", {
    abbr: "n",
    desc: "New directory name"
});
sc.command('newpackage', {
    desc: "Alias for newdir",
    callback: newDirCallback
}).option("name", {
    abbr: "n",
    desc: "New directory name"
});

// add dependency
sc.command('add-dependency', {
    desc: "Adds a dependency to the project",
    callback: function(options) {
        if (!_.has(options, "name") || _.isEmpty(options.name)) {
            var nm = readlineSync.question("New dependency name: ");
            if (_.isUndefined(nm) || _.isNull(nm) || _.isEmpty(nm)) {
                console.error("Dependency name is required");
                return;
            }
            options.name = nm;
        }
        if (!_.has(options, 'path') || _.isEmpty(options.path)) {
            var path = readlineSync.question("Path to dependency: ");
            if (_.isUndefined(path) || _.isNull(path) || _.isEmpty(path)) {
                console.error("Path to dependency is required");
                return;
            }
            options.path = path;
        }
        projectJs.addDependency(options);
    }
}).option('name', {
    abbr: 'n',
    desc: "Name of dependency (i.e. what the dependency should be referred to as within the project)"
}).option('path', {
    abbr: 'p',
    desc: "Path to dependency"
});

// add class alias
var aliasCallback = function(options) {
    if (!_.has(options, "alias") || _.isEmpty(options.alias)) {
        var alias = readlineSync.question("Enter alias: ");
        if (_.isUndefined(alias) || _.isNull(alias) || _.isEmpty(alias)) {
            console.error("Alias is required");
            return;
        }
        options.alias = alias;
    }
    if (!_.has(options, "name") || _.isEmpty(options.name)) {
        var nm = readlineSync.question("Class name: ");
        if (_.isUndefined(nm) || _.isNull(nm) || _.isEmpty(nm)) {
            console.error("Class name is required");
            return;
        }
        options.name = nm;
    }
    projectJs.addAlias({
        'alias': options.alias,
        'class': options.name
    });
};
sc.command('add-alias', {
    desc: "Adds a shorthand alias for an existing class within the project",
    callback: aliasCallback
}).option('alias', {
    abbr: 'a',
    desc: 'The alias'
}).option('name', {
    abbr: 'n',
    desc: "The full class name"
});
sc.command('alias', {
    desc: "Shorthand form for add-alias",
    callback: aliasCallback
}).option('alias', {
    abbr: 'a',
    desc: 'The alias'
}).option('name', {
    abbr: 'n',
    desc: "The full class name"
});

// remove class alias
sc.command('rm-alias', {
    desc: "Removes an alias from the project",
    callback: function(options) {
        ensureRequiredOption(
            options,
            'alias',
            "Enter alias to remove: ",
            "Alias is required"
        );
        if (!_.has(options, 'force') || !options['force']) {
            var isConfirmed = readlineSync.keyInYNStrict("Are you sure you want to delete this alias? This action cannot be undone!");
            if (!isConfirmed) {
                return;
            }
        }
        projectJs.removeAlias({
            "alias": options['alias'],
            callback: function(err, response) {
                if (err === null && response.success === true) {
                    console.log("Alias %s removed", options['alias']);
                } else if (err !== null) {
                    console.error("ERROR: %s", err.message);
                }
            }
        })
    }
}).option('alias', {
    abbr: 'a',
    desc: 'The alias to remove. Required.'
}).option('force', {
    abbr: 'f',
    desc: "Force remove / don't ask for confirmation",
    flag: true
});

// set start script
sc.command('set-start', {
    desc: "Sets the entry point for the project",
    callback: function(options) {
        if (_.has(options, 'use-script') && options['use-script'] === true) {
            // if setting a script file as the start point
            
            var isFileSet = ensureRequiredOption(
                                options, 
                                'file', 
                                "Path to script (relative to source directory): ", 
                                "Path to script file is required"
                            );

            if (isFileSet) {
                projectJs.setStartScript({
                    "script": options.file
                });
            }

        } else {
            // if setting a specific class and method as the start point
            var isClassSet = ensureRequiredOption(
                    options,
                    'class',
                    'Starting class name: ',
                    'Class name is required'
                ),
                isMethodSet = ensureRequiredOption(
                    options,
                    'method',
                    'Class method to call: ',
                    'Class method is required'
                );

            if (isClassSet && isMethodSet) {
                projectJs.setStartClass(options);
            }
        }
    }
}).option('use-script', {
    abbr: 's',
    desc: 'Set the entry point to a script file',
    flag: true
}).option('file', {
    abbr: 'f',
    desc: 'Path to the script file that will start the project'
}).option('class', {
    abbr: 'c',
    desc: 'Name of class to load at project start'
}).option('method', {
    abbr: 'm',
    desc: 'Name of class method to run when starting the project'
}).option('output', {
    abbr: 'o',
    desc: 'Name of starting script to output at project build (defaults to "./start.js")'
});

// build
sc.command("build", {
    desc: 'Builds the project, removing any dependencies on ProjectJs',
    callback: function() {
        projectJs.build();
    }
});

// run
sc.command("run", {
    desc: "Compiles and runs the project",
    callback: function() {
        projectJs.run();
    }
});

sc.parse();